var internal = require("internal");
var db = internal.db;
var _ = require("underscore");
var edges = db._collection("<%=edgeCollection %>");
var nodes = db._collection("<%=nodeCollection %>");

////////////////////////////////////
// Public Functions               //
////////////////////////////////////

exports.insertEdge = function(data) {
  var edge = JSON.parse(data);
  var from = edge._from;
  var to = edge._to;
  return edges.save(from, to, edge);
};

exports.deleteEdge = function(id) {
  return edges.remove(id);
};

exports.deleteEdgesForNode = function(id) {
  var es = edges.edges(id);
  _.each(es, function(e) {
    edges.remove(e._id);
  });
};

exports.patchEdge = function(id, data) {
  return edges.update(id, JSON.parse(data));
};

exports.insertNode = function(data) {
  return nodes.save(JSON.parse(data));
};

exports.deleteNode = function(id) {
  return nodes.remove(id);
};

exports.patchNode = function(id, data) {
  return nodes.update(id, JSON.parse(data));
};

exports.loadChildren = function(nodeid, direction) {
	var es = [];
	var ns = [];
	ns.push(db._document(nodeid));
	direction = direction || "outbound";
	switch (direction) {
		case "outbound":
			es = edges.outEdges(nodeid);
			_.each(es, function(e) {
				ns.push(db._document(e._to));
			});
			break;
		case "inbound":
			es = edges.inEdges(nodeid);
			_.each(es, function(e) {
				ns.push(db._document(e._from));
			});
			break;
		case "any":
			es = edges.edges(nodeid);
			_.each(es, function(e) {
				if (e._from === nodeid) {
					ns.push(db._document(e._to));
				} else {
					ns.push(db._document(e._from));
				}
			});
			break;
		default:
			es = edges.outEdges(nodeid);
	}
	var result = {
		nodes: ns,
		edges: es
	};
	return result;
};

exports.getEdgeCollection = function() {
  return edges;
};

exports.getNodeCollection = function() {
  return nodes;
};